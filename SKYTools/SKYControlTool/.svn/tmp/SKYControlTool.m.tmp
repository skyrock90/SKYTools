//
//  SKYControlTool.m
//  
//
//  Created by SKY on 15/11/3.
//
//

#import "SKYControlTool.h"



#define kScreenWidth  [UIScreen mainScreen].bounds.size.width
#define kScreenHeight [UIScreen mainScreen].bounds.size.height


@implementation SKYControlTool
//获取一个字符串数组中字符串的最大长度
+ (CGFloat)sizeWithStrArray:(NSArray *)strArray font:(UIFont *)font andMaxWidth:(CGFloat)maxWidth{
	CGFloat maxLength = 0;
	for (NSString *textStr in strArray) {
		CGRect rect = [textStr boundingRectWithSize:CGSizeMake(maxWidth, 0) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:font} context:nil];
		CGSize textSize = rect.size;
		if (textSize.width > maxLength) {
			maxLength = textSize.width;
		}
	}
	return maxLength;
}


//获取一个字符的size
+ (CGSize)sizeWithStr:(NSString *)str font:(UIFont *)font andMaxWidth:(CGFloat)maxWidth{
	CGRect rect = [str boundingRectWithSize:CGSizeMake(maxWidth, 0) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:font} context:nil];
	return rect.size;
}

#pragma mark -- 提示框
+ (void)showAlertWithController:(id)controller Message:(NSString *)message doneTitle:(NSString *)doneTitle doneBlock:(DoneBlock)block{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"提示" message:message preferredStyle: UIAlertControllerStyleAlert];
    [alert addAction:[UIAlertAction actionWithTitle:doneTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //点击按钮的响应事件；
        if (block != nil) {
            block();
        }   
    }]];
    //弹出提示框；
    [controller presentViewController:alert animated:true completion:nil];
}
#pragma mark -- 提示框两个按钮加动作
+ (void)showAlertWithControllers:(id)controller Message:(NSString *)message leftTitle:(NSString *)leftTitle righTitle:(NSString *)rightTitle leftBlock:(DoneBlock)leftBlock rightBlock:(DoneBlock)rightBlock{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"提示" message:message preferredStyle: UIAlertControllerStyleAlert];
    [alert addAction:[UIAlertAction actionWithTitle:leftTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //点击按钮的响应事件；
        if (leftBlock != nil) {
            leftBlock();
        }
    }]];
    [alert addAction:[UIAlertAction actionWithTitle:rightTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //点击按钮的响应事件；
        if (rightBlock != nil) {
            rightBlock();
        }
    }]];
    //弹出提示框；
    [controller presentViewController:alert animated:true completion:nil];


}

#pragma mark - 保存图片至本地沙盒
+ (BOOL)saveImage:(UIImage *)image withName:(NSString *)imageName{
    NSData *imageData = UIImageJPEGRepresentation(image, 1);
    
    // 获取沙盒目录
//    NSString *homeDirectory = NSHomeDirectory();/*获取程序的Home目录*/
//    NSArray*documentArr =NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);/*获取Document目录*/
//    NSString *fullPath = [[NSHomeDirectory() stringByAppendingPathComponent:@"Documents"] stringByAppendingPathComponent:imageName];
    
    /*获取Caches目录*/
    NSArray*cachesArr =NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES);
    NSString*caches = [cachesArr objectAtIndex:0];
    NSString *fullPath = [caches stringByAppendingPathComponent:imageName];

    // 将图片写入文件
    BOOL isSuccess = [imageData writeToFile:fullPath atomically:NO];
    
    return isSuccess;
}

+ (UIImage *)getImageWithName:(NSString *)imageName{
    /*获取Caches目录*/
    NSArray*cachesArr =NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES);
    NSString*caches = [cachesArr objectAtIndex:0];
    NSString *fullPath = [caches stringByAppendingPathComponent:imageName];
    
    // 将图片读出
    UIImage *savedImage = [[UIImage alloc] initWithContentsOfFile:fullPath];
    
    return savedImage;
}

//删除文件
+ (BOOL)deleteFileWithName:(NSString *)fileName {
    /*获取Caches目录*/
    NSArray*cachesArr =NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES);
    NSString*caches = [cachesArr objectAtIndex:0];
    NSString *fullPath = [caches stringByAppendingPathComponent:fileName];
     BOOL isSuccess = [[NSFileManager defaultManager] removeItemAtPath:fullPath error:nil];
    
    return isSuccess;
}



#pragma mark -- 字符串处理
+ (BOOL)stringIsNullOrEmpty:(NSString *)str{
    return (str == nil || [str isKindOfClass:[NSNull class]] || str.length == 0);
}

+ (NSString *)handleStringWith:(NSString *)string {
    if (string == nil || [string isKindOfClass:[NSNull class]] || string.length == 0 || [string isEqualToString:@"(null)"] || [string isEqualToString:@"<null>"]) {
        return @"";
    }
    //去掉首尾换行符及空格
    string = [NSString stringWithFormat:@"%@",string];
    string = [string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    //判空处理
    
    return string;
}




@end

//**********************************************************button
@implementation UIButton (SKYControlTool)

//创建button方法1
+ (UIButton *)buttonWithFrame:(CGRect)frame action:(SEL)sel fontSize:(CGFloat)fontSize title:(NSString *)title andTarget:(id)target{
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
    button.frame = frame;
    [button setTitle:title forState:UIControlStateNormal];
    button.titleLabel.font = [UIFont systemFontOfSize:fontSize];
    [button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
    
    return button;

}

//创建button方法2
+ (UIButton *)buttonWithFrame:(CGRect)frame action:(SEL)sel normalImageName:(NSString *)normalImage selectedImageName:(NSString *)selectedImage fontSize:(CGFloat)fontSize title:(NSString *)title andTarget:(id)target{
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
    [button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
    [button setImage:[UIImage imageNamed:normalImage] forState:UIControlStateNormal];
    [button setImage:[UIImage imageNamed:selectedImage] forState:UIControlStateSelected];
    button.titleLabel.font = [UIFont systemFontOfSize:fontSize];
    [button setTitle:title forState:UIControlStateNormal];
    button.frame = frame;
    
    return button;    
}

//创建button方法3
+ (UIButton *)buttonWithFrame:(CGRect)frame action:(SEL)sel insetImageName:(NSString *)image edgeInsets:(UIEdgeInsets)edgeInsets fontSize:(CGFloat)fontSize title:(NSString *)title andTarget:(id)target{
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
    button.titleLabel.font = [UIFont systemFontOfSize:fontSize];
    [button setTitle:title forState:UIControlStateNormal];
    [button setImageEdgeInsets:edgeInsets];
    button.frame = frame;
    
    return button;
}

//创建button方法4
+ (UIButton *)buttonWithFrame:(CGRect)frame action:(SEL)sel backImageName:(NSString *)backImage fontSize:(CGFloat)fontSize title:(NSString *)title andTarget:(id)target{
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
    [button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
    [button setBackgroundImage:[UIImage imageNamed:backImage] forState:UIControlStateNormal];
    button.titleLabel.font = [UIFont systemFontOfSize:fontSize];
    [button setTitle:title forState:UIControlStateNormal];
    button.frame = frame;
    
    return button;
}


#pragma mark -- 设置倒计时
- (void)startCutDownWithTime:(NSInteger)time doneBackColor:(UIColor *)doneColor runBackColor:(UIColor *)runColor title:(NSString *)title runTitle:(NSString *)runTitle  {

    //倒计时时间
    __block NSInteger timeOut = time;
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
    //每秒执行一次
    dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), 1.0 * NSEC_PER_SEC, 0);
    dispatch_source_set_event_handler(_timer, ^{
        
        //倒计时结束，关闭
        if (timeOut <= 0) {
            dispatch_source_cancel(_timer);
            dispatch_async(dispatch_get_main_queue(), ^{
                self.backgroundColor = doneColor;
                [self setTitle:title forState:UIControlStateNormal];
                self.userInteractionEnabled = YES;
            });
        } else {
            int allTime = (int)time + 1;
            int seconds = timeOut % allTime;
            NSString *timeStr = [NSString stringWithFormat:@"%0.2d", seconds];
            dispatch_async(dispatch_get_main_queue(), ^{
                self.backgroundColor = runColor;
                [self setTitle:[NSString stringWithFormat:@"%@%@",timeStr,runTitle] forState:UIControlStateNormal];
                self.userInteractionEnabled = NO;
            });
            timeOut--;
        }
    });
    dispatch_resume(_timer);
}



@end

//**********************************************************导航栏左侧返回按钮
@implementation UIBarButtonItem (SKYControlTool)
+ (UIBarButtonItem *)barButtonItemWithImageName:(NSString *)imageName target:(id)target sel:(SEL)sel andTitle:(NSString *)title{
	
	UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
	button.frame = CGRectMake(0, 0, 80, 40);
	[button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
	[button setImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];
	[button setTitle:title forState:UIControlStateNormal];
	[button setTintColor:[UIColor whiteColor]];
	button.titleLabel.font = [UIFont systemFontOfSize:14];
	button.contentEdgeInsets = UIEdgeInsetsMake(0, -20, 0, 0);//调整button上内容位置
	button.imageEdgeInsets = UIEdgeInsetsMake(0, 6, 0, 0);//调整图片位置
	button.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
	//将UIButton包装成UIBarButtonItem
	UIBarButtonItem *buttonItem = [[UIBarButtonItem alloc] initWithCustomView:button];
	
	return buttonItem;
}


+ (UIBarButtonItem *)barButtonItemWithImageName:(NSString *)imageName edgeInsets:(UIEdgeInsets)edgeInsets target:(id)target andSel:(SEL)sel{
	
	UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
	button.frame = CGRectMake(0, 0, 60, 40);
	[button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
	[button setImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];
	[button setContentEdgeInsets:edgeInsets];
	//将UIButton包装成UIBarButtonItem
	UIBarButtonItem *buttonItem = [[UIBarButtonItem alloc] initWithCustomView:button];
	
	return buttonItem;
}

+ (UIBarButtonItem *)barButtonItemWithTarget:(id)target sel:(SEL)sel edgeInsets:(UIEdgeInsets)edgeInsets andTitle:(NSString *)title{
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
    button.frame = CGRectMake(0, 0, 70, 44);
    [button addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];
    [button setTitle:title forState:UIControlStateNormal];
    [button setTintColor:[UIColor whiteColor]];
    [button setTitleEdgeInsets:edgeInsets];
    button.titleLabel.font = [UIFont systemFontOfSize:14];
    //将UIButton包装成UIBarButtonItem
    UIBarButtonItem *buttonItem = [[UIBarButtonItem alloc] initWithCustomView:button];
    
    return buttonItem;
}

@end

//**********************************************************label
@implementation UILabel (SKYControlTool)
+ (UILabel *)labelWithText:(NSString *)text fontSize:(CGFloat)fontSize textColor:(UIColor *)textColor{
    
    UILabel *label = [[UILabel alloc] init];
    label.font = [UIFont systemFontOfSize:fontSize];
    label.textColor = textColor;
    label.text = text;
    
    return  label;
}


+ (UILabel *)labelWithFrame:(CGRect)frame text:(NSString *)text fontSize:(CGFloat)fontSize textColor:(UIColor *)textColor andBackColor:(UIColor *)backColor{
    
    UILabel *label = [[UILabel alloc] initWithFrame:frame];    
    label.font = [UIFont systemFontOfSize:fontSize];
    label.backgroundColor = backColor;
    label.textColor = textColor;
    label.text = text;
    
    return  label;
}

//
+ (UILabel *)labelWithContent:(NSString *)content font:(CGFloat)font lineSpace:(CGFloat)lineSpace andTextColor:(UIColor *)textColor{
    
    UILabel *label = [[UILabel alloc]init];
    NSMutableParagraphStyle * paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    [paragraphStyle setLineSpacing:lineSpace];//行间距
    NSAttributedString *string = [[NSAttributedString alloc] initWithString:content attributes:@{NSForegroundColorAttributeName : textColor, NSParagraphStyleAttributeName: paragraphStyle, NSFontAttributeName : [UIFont systemFontOfSize:16]}];
    label.attributedText = string;
    
    return label;
}

//定制绿色带边框label
+ (UILabel *)labelWithText:(NSString *)text font:(CGFloat)font{
    
    UILabel *label = [[UILabel alloc]init];
    label.text = text;
    label.font = [UIFont systemFontOfSize:font];
    label.textColor = RGBA(11, 199, 99, 1);
    label.layer.borderWidth = 0.5;
    label.layer.cornerRadius = 2.5;
    label.layer.borderColor = RGBA(11, 199, 99, 1).CGColor;
    label.textAlignment = NSTextAlignmentCenter;
    CGSize labelsize = [text sizeWithAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]}];
    label.size = CGSizeMake(labelsize.width+12, labelsize.height+4);
    //@{labelsize.width,labelsize.height};
    
    
    return label;
}

@end


//**********************************************************UIView
@implementation UIView (SKYControlTool)
+ (UIView *)viewWithFrame:(CGRect)frame andBackColor:(UIColor *)backColor{
    
    UIView *view = [[UIView alloc]initWithFrame:frame];
    view.backgroundColor = backColor;
   
    return view;
}

//切任意某个圆角
+ (UIView *)viewWithFrame:(CGRect)frame backColor:(UIColor *)backColor andCorner:(RectCorner)rectConer andCornerRedius:(NSInteger)redius{
    
    UIView *view = [[UIView alloc]initWithFrame:frame];
    view.backgroundColor = backColor;
    UIRectCorner rect = 0;
    if (rectConer == RectCornerTopLeft) {
        rect = UIRectCornerTopLeft;
    }else if (rectConer == RectCornerTopRight) {
        rect = UIRectCornerTopRight;
    }else if (rectConer == RectCornerBottomLeft) {
        rect = UIRectCornerBottomLeft;
    }else if (rectConer == RectCornerBottomRight) {
        rect = UIRectCornerBottomRight;
    }else if (rectConer == RectCornerTopTwo) {
        rect = UIRectCornerTopLeft | UIRectCornerTopRight;
    }else if (rectConer == RectCornerBottomTwo) {
        rect = UIRectCornerBottomLeft | UIRectCornerBottomRight;
    }
    
    
    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:view.bounds byRoundingCorners:rect cornerRadii:CGSizeMake(redius, redius)];
    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
    maskLayer.frame = view.bounds;
    maskLayer.path = maskPath.CGPath;
    view.layer.mask = maskLayer;
    
    return view;
}


//按钮视图
+ (UIView *)viewWithFrame:(CGRect)frame imageName:(NSString *)imageName tapAction:(SEL)sel titleColor:(UIColor *)titleColor fontSize:(CGFloat)fontSize target:(id)target andTitle:(NSString *)title{
    
    UIView *view = [[UIView alloc]initWithFrame:frame];
    UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, view.frame.size.width, view.frame.size.width)];
    imageView.image = [UIImage imageNamed:imageName];
    [view addSubview:imageView];
    
    UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0, CGRectGetMaxY(imageView.frame), view.frame.size.width, view.frame.size.height-view.frame.size.width)];
    label.text = title;
    label.font = [UIFont systemFontOfSize:fontSize];
    label.textAlignment = NSTextAlignmentCenter;
    label.textColor = titleColor;
    [view addSubview:label];
    
    //添加手势
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:target action:sel];
    [view addGestureRecognizer:tap];
    view.userInteractionEnabled = YES;
    
    return view;
}


//键盘附件视图
+ (UIView *)accessoryViewWithFrame:(CGRect)frame cleanButtonSel:(SEL)cleanSel resignButtonSel:(SEL)resignSel fontSize:(CGFloat)fontSize target:(id)target backColor:(UIColor *)backColor resignButtonTitle:(NSString *)resignTitle andCleanButtonTitle:(NSString *)cleanTitle{
    
    UIView *accessoryView = [[UIView alloc]initWithFrame:frame];
    accessoryView.backgroundColor = backColor;
   
    //键盘弹回
    UIButton *keyboardBack = [UIButton buttonWithType:UIButtonTypeSystem];
    keyboardBack.frame = CGRectMake(0, 0, kScreenWidth/2.f, accessoryView.frame.size.height);
    [accessoryView addSubview:keyboardBack];
    [keyboardBack setTitle:resignTitle forState:UIControlStateNormal];
    keyboardBack.titleLabel.font = [UIFont boldSystemFontOfSize:fontSize];
    keyboardBack.tintColor = [UIColor whiteColor];
    [keyboardBack addTarget:target action:resignSel forControlEvents:UIControlEventTouchUpInside];
    
    //清除按钮
    UIButton *cleanButton = [UIButton buttonWithType:UIButtonTypeSystem];
    cleanButton.frame = CGRectMake(kScreenWidth/2.f, 0, kScreenWidth/2.f, accessoryView.frame.size.height);
    [accessoryView addSubview:cleanButton];
    [cleanButton setTitle:cleanTitle forState:UIControlStateNormal];
    cleanButton.titleLabel.font = [UIFont boldSystemFontOfSize:fontSize];
    cleanButton.tintColor = [UIColor whiteColor];
    [cleanButton addTarget:target action:cleanSel forControlEvents:UIControlEventTouchUpInside];

    return accessoryView;
}


@end


//**********************************************************UIImageView
@implementation UIImageView (SKYControlTool)

+ (UIImageView *)imageViewWithFrame:(CGRect)frame imageName:(NSString *)imageName andCornerRadius:(CGFloat)cornerRadius{
    
    UIImageView *imageView = [[UIImageView alloc]initWithFrame:frame];
    imageView.image = [UIImage imageNamed:imageName];
    imageView.clipsToBounds = YES;
    imageView.layer.cornerRadius = cornerRadius;
    
    return imageView;
}

@end

//**********************************************************UIImageView
@implementation UIAlertView (SKYControlTool)

+ (void)showAlertViewPromptWithMessage:(NSString *)message andDelegate:(id)delegate{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:message delegate:self cancelButtonTitle:@"确定" otherButtonTitles:  nil];
    
    [alert show];
}


+ (void)showAlertViewChooseWithMessage:(NSString *)message andDelegate:(id)delegate{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:message delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
    alert.delegate = delegate;
    
    [alert show];
}

+ (void)showAlertViewUpdateWithMessage:(NSString *)message andDelegate:(id)delegate{
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:message delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"立即更新", nil];
    
    [alert show];
}

+ (void)showAlertNoNetWork{
    
    UIAlertView *alterView = [[UIAlertView alloc]initWithTitle:@"无法启动相机" message:@"获取数据失败，请检查网络" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
    [alterView show];

}

@end



//**********************************************************UIImageView
@implementation UIImage (SKYControlTool)

//在指定的视图内进行截屏操作,返回截屏后的图片
+ (UIImage *)imageWithScreenContentsInView:(UIView *)view
{
    //根据屏幕大小，获取上下文
    UIGraphicsBeginImageContext([[UIScreen mainScreen] bounds].size);
    [view.layer renderInContext:UIGraphicsGetCurrentContext()]; 
    UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return viewImage;
}


+ (UIImage*)resizeImageToSize:(CGSize)size sizeOfImage:(UIImage*)image
{
    
    UIGraphicsBeginImageContext(size);
    //获取上下文内容
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    CGContextTranslateCTM(ctx, 0.0, size.height);
    CGContextScaleCTM(ctx, 1.0, -1.0);
    //重绘image
    CGContextDrawImage(ctx,CGRectMake(0.0f, 0.0f, size.width, size.height), image.CGImage);
    //根据指定的size大小得到新的image
    UIImage* scaled = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return scaled;
}

+ (UIImage *)resizedImageWithName:(NSString *)name left:(CGFloat)left top:(CGFloat)top{//将图片瓦片平铺
    UIImage *image = [UIImage imageNamed:name];
    return [image stretchableImageWithLeftCapWidth:left topCapHeight:top];
}

@end


//**********************************************************UIImageView
@implementation UITextField (SKYControlTool)

+ (UITextField *)textFieldWithFrame:(CGRect)frame placeholder:(NSString *)placeholder fontSize:(CGFloat)fontSize andDelegate:(id)delegate{
    UITextField *textfield = [[UITextField alloc]initWithFrame:frame];
    textfield.placeholder = placeholder;
    textfield.borderStyle = UITextBorderStyleNone;
    textfield.font = [UIFont systemFontOfSize:fontSize];
    textfield.clearButtonMode = UITextFieldViewModeAlways;//设置擦除按钮
    textfield.delegate = delegate;//return键盘弹回

    
    return textfield;
}
@end



//**********************************************************UIcolr十六进制转RGB
@implementation UIColor (SKYControlTool)
+ (UIColor *)colorToRGBWithHexValue:(NSString *)inColorString andAlpha:(CGFloat)alpha{
    UIColor *result = nil;
    unsigned int colorCode = 0;
    unsigned char redByte, greenByte, blueByte;
    
    if (nil != inColorString)
    {
        NSScanner *scanner = [NSScanner scannerWithString:inColorString];
        (void) [scanner scanHexInt:&colorCode]; // ignore error
    }
    redByte = (unsigned char) (colorCode >> 16);
    greenByte = (unsigned char) (colorCode >> 8);
    blueByte = (unsigned char) (colorCode); // masks off high bits
    result = [UIColor
              colorWithRed: (float)redByte / 0xff
              green: (float)greenByte/ 0xff
              blue: (float)blueByte / 0xff
              alpha:alpha];
    return result;
}
@end


//**********************************************************UIcolr十六进制转RGB
@implementation NSMutableAttributedString (SKYControlTool)
+ (NSMutableAttributedString *)stringWithText:(NSString *)text range:(NSRange)range selectedTextColor:(UIColor *)color andFontOfSize:(CGFloat)font{
    NSMutableAttributedString *mutStr = [[NSMutableAttributedString alloc] initWithString:text];
    [mutStr addAttributes:@{NSForegroundColorAttributeName:color, NSFontAttributeName:[UIFont systemFontOfSize:font]} range:range];
    return mutStr;
}


@end

//**********************************************************获取日期NSDate
@implementation NSDate (SKYControlTool)
+ (NSString *)getDateStrWithPhoneWithDateformatterStr:(NSString *)formatterStr{
    
    NSDate *  nowDate=[NSDate date];
    NSDateFormatter  *dateFormatter=[[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:formatterStr];
    NSString *  locationString=[dateFormatter stringFromDate:nowDate];
    
    return locationString;
}

@end





